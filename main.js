$(document).ready(function () {
    maptilersdk.config.apiKey = 'uAItrm0npRJhGt3vgNDx';

    let map;
    let startMarker;
    let endMarker = null;
    let currentPosition = [0, 0]; // [lng, lat]
    let initialized = false;
    let fullRouteCoords = [];
    let pendingSimulatedRoute = null;
    let routeLayerId = null;
    let inputValueSave;
    let trackingEnabled = false;

    $('#startBtn').on('click', function () {
        trackingEnabled = true;
        alert("–°–ª–µ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!");

        $('.maplibregl-marker svg').eq(0).remove()
        $('.maplibregl-marker').eq(0).html(`<img class="bolide" src="./free-icon-racing-car-1505502.png"/>`)

        if (pendingSimulatedRoute && pendingSimulatedRoute.length > 0) {
            simulateMovementAlongRoute(pendingSimulatedRoute);
            pendingSimulatedRoute = null; // —Å–±—Ä–æ—Å–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å —Å–Ω–æ–≤–∞
        }
    });

    // üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    function findNearestIndex(current, coords) {
        let minDist = Infinity;
        let nearestIndex = 0;
        coords.forEach((coord, index) => {
            const dx = current[0] - coord[0];
            const dy = current[1] - coord[1];
            const dist = dx * dx + dy * dy;
            if (dist < minDist) {
                minDist = dist;
                nearestIndex = index;
            }
        });
        return nearestIndex;
    }

    function getBearing(from, to) { // üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≥–ª–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        const lon1 = from[0] * Math.PI / 180;
        const lat1 = from[1] * Math.PI / 180;
        const lon2 = to[0] * Math.PI / 180;
        const lat2 = to[1] * Math.PI / 180;

        const y = Math.sin(lon2 - lon1) * Math.cos(lat2);
        const x = Math.cos(lat1) * Math.sin(lat2) -
            Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
        const brng = Math.atan2(y, x);
        return (brng * 180 / Math.PI + 360) % 360;
    }

    const watchId = navigator.geolocation.watchPosition(
        function (position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            currentPosition = [longitude, latitude];

            if (!initialized) {

                map = new maptilersdk.Map({
                    container: 'map',
                    center: currentPosition,
                    zoom: 15,
                    style: maptilersdk.MapStyle.STREETS
                })

                const gc = new maptilersdkMaptilerGeocoder.GeocodingControl({
                    country: ['KZ'], // –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ
                    bbox: [57.005856, 50.1969322, 57.2762532, 50.3650833], // –∞–∫—Ç–æ–±–µ
                    marker: false,
                    debounceSearch: 100,
                    // clearOnBlur: true
                });
                map.addControl(gc, 'top-left');

                gc.on('select', () => {
                    $('.marker-interactive').remove()
                })

                gc.on('pick', (e) => {
                    const fullAddress = e.feature.place_name; // —è–∑—ã–∫
                    const address = fullAddress.split(',')[0].trim();

                    const input = document.querySelector('.svelte-bz0zu3 input');

                    const currentValue = input.value.trim();
                    if (currentValue.length > 0) {
                        inputValueSave = address
                    }

                    map.removeControl(gc, 'top-left'); // —Ç—É—Ç –æ–±–Ω–æ–≤–ª—è—é –ø–æ–∏—Å–∫–æ–≤–∏–∫
                    $('.mapboxgl-ctrl-geocoder').remove()
                    map.addControl(gc, 'top-left')  // –∏–Ω–∞—á–µ –Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∞–¥—Ä–µ—Å–∞

                    drawTheRoad(e.feature.center[0], e.feature.center[1])

                })

                startMarker = new maptilersdk.Marker({color: '#f50'})
                    .setLngLat(currentPosition)
                    .addTo(map);

                initialized = true;

            } else {
            if (fullRouteCoords.length > 0 && map.getSource('route')) {
                const nearestIndex = findNearestIndex(currentPosition, fullRouteCoords);
                const remainingRoute = fullRouteCoords.slice(nearestIndex);

                // üîπ 1. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
                map.getSource('route').setData({
                    type: 'Feature',
                    geometry: {
                        type: 'LineString',
                        coordinates: remainingRoute
                    }
                });

                // üîπ 2. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ä —É–∂–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
                startMarker.setLngLat(currentPosition);

                // üîπ 3. –î–≤–∏–≥–∞–µ–º –∫–∞—Ä—Ç—É (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ —Å–ª–µ–∂–µ–Ω–∏–µ)
                if (trackingEnabled && remainingRoute.length > 1) {
                    const nextPoint = remainingRoute[1];
                    const bearing = getBearing(currentPosition, nextPoint);

                    map.easeTo({
                        center: currentPosition,
                        bearing: bearing,
                        pitch: 45,
                        duration: 1000
                    });
                }
            } else {
                // –ë–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞
                startMarker.setLngLat(currentPosition);
            }
        }

    },
        function (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error.message);
        },
        {
            enableHighAccuracy: true,
            maximumAge: 0,
            timeout: 10000
        }
    );

    function drawTheRoad(lng, lat) {

        const input = document.querySelector('.svelte-bz0zu3 input');

        $(document).on('click', '.svelte-bz0zu3 button', function () { // –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤–∏–∫
            input.value = ''
            const event = new Event('input', {bubbles: true});
            input.dispatchEvent(event);
        });

        if (input) {
            input.value = inputValueSave; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫

            input.addEventListener('focus', () => { // –∞ —Ç—É—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
                const currentValue = input.value.trim();
                if (currentValue.length > 0) {
                    const event = new Event('input', {bubbles: true});
                    input.dispatchEvent(event);
                }
            });
        }

        const end = [lng, lat];

        if (endMarker) endMarker.remove();

        endMarker = new maptilersdk.Marker({color: '#1E90FF', draggable: true}) // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω draggable: true
            .setLngLat(end)
            .addTo(map);

        // üîÅ —Å–ª—É—à–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        endMarker.on('dragend', () => {
            let cloneMarker;

            setTimeout(() => {
                // –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–ª–∞—Å—Å—É
                cloneMarker = $('.maplibregl-marker svg').eq(-1)
                const markerEl = $('.maplibregl-marker').eq(-1); // –∏–ª–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ: –ø–æ –ø–æ–∑–∏—Ü–∏–∏

                $(markerEl).html(`<div class="loader"><img src="./Dual%20Ring@1x-1.0s-242px-242px.gif"></div>`)

            }, 0);

            const newLngLat = endMarker.getLngLat();
            drawTheRoad(newLngLat.lng, newLngLat.lat); // –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
            let address

            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ MapTiler
            fetch(`https://api.maptiler.com/geocoding/${newLngLat.lng},${newLngLat.lat}.json?key=uAItrm0npRJhGt3vgNDx`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.features && data.features.length > 0) {
                        fullAddress = data.features[0].place_name_ru; // —è–∑—ã–∫
                        address = fullAddress.split(',')[0].trim();
                        // alert(address)
                        // –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —ç–ª–µ–º–µ–Ω—Ç: $('#someElement').text(address);
                        // –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–ª–∞—Å—Å—É
                        const markerEl = $('.maplibregl-marker').eq(-1);

                        $(markerEl).html(cloneMarker)

                        const input = document.querySelector('.svelte-bz0zu3 input');
                        if (input) {
                            input.value = address; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫
                            input.focus()

                            if (inputValueSave === address) {
                                input.addEventListener('focus', () => { // –∞ —Ç—É—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
                                    const currentValue = input.value.trim();
                                    if (currentValue.length > 0) {
                                        const event = new Event('input', {bubbles: true});
                                        input.dispatchEvent(event);
                                    }
                                });
                            } else {

                                const currentValue = input.value.trim();
                                if (currentValue.length > 0) {
                                    const event = new Event('input', {bubbles: true});
                                    input.dispatchEvent(event);
                                }
                            }
                        }
                    }
                })
                .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:', err))
                .finally(() => {

                })
        });

        const url = `https://router.project-osrm.org/route/v1/driving/${currentPosition[0]},${currentPosition[1]};${end[0]},${end[1]}?overview=full&geometries=geojson`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                fullRouteCoords = data.routes[0].geometry.coordinates;

                const routeGeoJSON = {
                    type: 'Feature',
                    geometry: {
                        type: 'LineString',
                        coordinates: fullRouteCoords
                    }
                };

                if (routeLayerId && map.getSource('route')) {
                    map.removeLayer(routeLayerId);
                    map.removeSource('route');
                }

                routeLayerId = 'route-' + Date.now();

                map.addSource('route', {
                    type: 'geojson',
                    data: routeGeoJSON
                });

                map.addLayer({
                    id: routeLayerId,
                    type: 'line',
                    source: 'route',
                    layout: {'line-cap': 'round', 'line-join': 'round'},
                    paint: {
                        'line-color': '#1E90FF',
                        'line-width': 5,
                        'line-opacity': 0.8
                    }
                });

                const bounds = fullRouteCoords.reduce(
                    (b, coord) => b.extend(coord),
                    new maptilersdk.LngLatBounds(fullRouteCoords[0], fullRouteCoords[0])
                );
                map.fitBounds(bounds, {padding: 50});

                // —Å–∏–º—É–ª—è—Ü–∏—è
                pendingSimulatedRoute = fullRouteCoords;
            });
    }

    // ======= üîÑ –°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è =======
    function simulateMovementAlongRoute(coords) {
        let i = 0;
        const totalPoints = coords.length;

        const interval = setInterval(() => {
            if (i >= totalPoints) {
                clearInterval(interval);
                return;
            }

            const lngLat = coords[i];
            const nextPoint = coords[Math.min(i + 1, totalPoints - 1)];

            const remainingCoords = coords.slice(i);

            // üîπ 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ª–∏–Ω–∏—é
            const updatedRouteGeoJSON = {
                type: 'Feature',
                geometry: {
                    type: 'LineString',
                    coordinates: remainingCoords
                }
            };

            if (map.getSource('route')) {
                map.getSource('route').setData(updatedRouteGeoJSON);
            }

            // üîπ 2. –ó–∞—Ç–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º –º–∞—Ä–∫–µ—Ä
            currentPosition = lngLat;
            startMarker.setLngLat(lngLat);

            // üîπ 3. –ü–æ—Ç–æ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º –∫–∞–º–µ—Ä—É
            const bearing = getBearing(lngLat, nextPoint);
            map.easeTo({
                center: lngLat,
                bearing: bearing,
                pitch: 45,
                duration: 300
            });

            i++;
        }, 1000); // —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    }

});
